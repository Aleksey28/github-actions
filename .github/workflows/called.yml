on:
  workflow_call:
    inputs:
      test-group-count:
        required: true
        type: number
jobs:
  build:
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        test-group: [1, 2, 3]
    env:
      TEST_FRAGMENTS_COUNT: ${{ inputs.test-group-count }}
      CURRENT_TEST_FRAGMENT_NUMBER: ${{ matrix.test-group }}
    outputs:
      test-1-failed: "${{ steps.handle-failure.outputs.test_1_failed }}"
      test-3-failed: "${{ steps.handle-failure.outputs.test_3_failed }}"
      test-2-failed: "${{ steps.handle-failure.outputs.test_2_failed }}"
      failed: "${{ steps.handle-failure-flag.outputs.failed }}"
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: "Check envs"
        run: echo "$CURRENT_TEST_FRAGMENT_NUMBER of $TEST_FRAGMENTS_COUNT"
      - name: Set output
        id: output
        run: echo "test=hello" >> "$GITHUB_OUTPUT"
      - name: Show output
        run: echo "${{steps.output.outputs.test}}"
      - name: Rise error
        run: exit(1)
        if: ${{ matrix.test-group == 2 || matrix.test-group == 3 }}
      - name: Set failed flag
        id: handle-failure-flag
        run: echo "failed=true" >> "$GITHUB_OUTPUT"
        if: failure() || cancelled()
      - name: Set failed flag
        id: handle-failure
        run: echo "test_${{ matrix.test-group }}_failed=true" >> "$GITHUB_OUTPUT"
        if: failure() || cancelled()
      - name: Show context
        run: echo "github.action_status - ${{ github.action_status }}"
        if: always()
      - name: Show context
        run: echo "job.status - ${{ job.status }}"
        if: always()
      # - name: View context attributes
      #   if: always()
      #   uses: actions/github-script@v6
      #   with:
      #     script: console.log(context)
      # - uses: cloudposse/github-action-matrix-outputs-write@main
      #   if: always()
      #   id: out
      #   with:
      #     matrix-step-name: ${{ github.job }}
      #     matrix-key: ${{ matrix.test-group }}
      #     outputs: |-
      #       failed: '${{ steps.execution-result.outputs.failed || 'false' }}'

  # read:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - uses: cloudposse/github-action-matrix-outputs-read@main
  #       id: read
  #       with:
  #         matrix-step-name: build

  #   outputs:
  #     result: "${{ steps.read.outputs.result }}"

  check:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Show matrix results
        run: echo "Errors ${{needs.build.outputs}}"
      - name: Show matrix results
        run: echo "Errors ${{toJSON(needs.build.outputs)}}"
      - name: Show status needs.build.outputs
        run: echo "status - ${{fromJSON('["success", "failure"]')[contains(needs.build.outputs, 'true')] }}"
      - name: Show status needs.build.outputs.*
        run: echo "status - ${{fromJSON('["success", "failure"]')[contains(needs.build.outputs.*, 'true')] }}"
      - name: Show status needs.build.outputs.failed
        run: echo "status - ${{fromJSON('["success", "failure"]')[fromJSON(needs.build.outputs.failed)] }}"
      # - name: Show success
      #   run: echo "Success"
      #   if: ${{ !fromJSON(needs.build.failed) }}
      # - name: Show error
      #   run: echo "Error"
      #   if: ${{ fromJSON(needs.build.failed) }}
      # - name: Show error
      #   run: echo "Error ${{needs.build.all-results}}"